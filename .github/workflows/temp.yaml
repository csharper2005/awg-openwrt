name: Build AmneziaWG on ImmortalWrt SDK

on:
  workflow_dispatch:
    inputs:
      immortal_tag:
        description: "ImmortalWrt release/tag"
        required: true
        type: string
        default: "24.10.3"
      pkgarch:
        description: "Package architecture"
        required: true
        type: string
        default: "aarch64_cortex-a53"
      target:
        description: "Target platform"
        required: true
        type: string
        default: "mediatek"
      subtarget:
        description: "Target subplatform"
        required: true
        type: string
        default: "filogic"
      compile_kmod:
        description: "Compile kernel module"
        required: true
        type: boolean
        default: true
      compile_go:
        description: "Compile Go implementation"
        required: true
        type: boolean
        default: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout AmneziaWG packages
        uses: actions/checkout@v5
        with:
          repository: kozhini/amneziawg-openwrt
          ref: master
          fetch-depth: 0
          path: amneziawg

      - name: Download and extract ImmortalWrt SDK
        run: |
          mkdir -p sdk_tmp
          cd sdk_tmp
          SDK_URL="https://downloads.immortalwrt.org/releases/${{ inputs.immortal_tag }}/targets/${{ inputs.target}}/${{ inputs.subtarget}}/immortalwrt-sdk-${{ inputs.immortal_tag }}-${{ inputs.target}}-${{ inputs.subtarget}}_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
          wget -O sdk.tar.zst "$SDK_URL"
          
          # Узнаем название корневой директории внутри архива
          SDK_DIR=$(tar --zstd -tf sdk.tar.zst | head -1 | cut -d/ -f1)
          
          # Распаковываем архив
          tar --zstd -xf sdk.tar.zst
          
          # Переименовываем в стандартное имя
          mv "$SDK_DIR" ../sdk
          cd ..
          rm -rf sdk_tmp

      - name: Copy AmneziaWG packages into SDK
        run: |
          mkdir -p sdk/package
          cp -r amneziawg/amneziawg-go sdk/package/
          cp -r amneziawg/amneziawg-tools sdk/package/
          cp -r amneziawg/kmod-amneziawg sdk/package/
          cp -r amneziawg/luci-proto-amneziawg sdk/package/

      - name: Update PKG_SOURCE_VERSION & HASH
        run: |
          set -e -x
          update_pkg() {
            local pkg_dir="$1"
            local repo="$2"
            local branch="$3"
            echo "--- Updating $pkg_dir from $branch ---"
            commit=$(git ls-remote "$repo" "$branch" | awk '{print $1; exit}')
            url="$repo/archive/$commit.tar.gz"
            hash=$(curl -L --retry 3 -s "$url" | sha256sum | cut -d' ' -f1)
            if [ -d "$pkg_dir" ]; then
              cd "$pkg_dir"
              sed -i "s/^PKG_SOURCE_VERSION:=.*/PKG_SOURCE_VERSION:=$commit/" Makefile
              sed -i "s/^PKG_MIRROR_HASH:=.*/PKG_MIRROR_HASH:=$hash/" Makefile
              cd - >/dev/null
              echo "--- $pkg_dir updated: $commit ---"
            else
              echo "Warning: directory $pkg_dir not found"
            fi
          }
          update_pkg "sdk/package/amneziawg-go" "https://github.com/amnezia-vpn/amneziawg-go.git" "master"
          update_pkg "sdk/package/amneziawg-tools" "https://github.com/amnezia-vpn/amneziawg-tools.git" "master"
          update_pkg "sdk/package/kmod-amneziawg" "https://github.com/amnezia-vpn/amneziawg-linux-kernel-module.git" "feature/awg2"

      - name: Setup feeds & config
        run: |
          cd sdk
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          cat > .config <<EOF
          CONFIG_PACKAGE_kmod-amneziawg=m
          CONFIG_PACKAGE_amneziawg-tools=y
          CONFIG_PACKAGE_luci-app-amneziawg=y
          CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m
          CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m
          CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m
          EOF
          make defconfig

      - name: Build AmneziaWG packages
        run: |
          cd sdk
          if [ "${{ inputs.compile_kmod }}" = "true" ]; then
            make package/kmod-amneziawg/{clean,download,prepare,compile} -j$(nproc)
          fi
          if [ "${{ inputs.compile_go }}" = "true" ]; then
            make package/amneziawg-tools/{clean,download,prepare,compile} -j$(nproc)
            make package/luci-app-amneziawg/{clean,download,prepare,compile} -j$(nproc)
          fi

      - name: Check VERMAGIC of kmod-amneziawg
        if: ${{ inputs.compile_kmod == 'true' }}
        run: |
          cd immortalwrt
          KMOD_PATH=$(find build_dir/target-*/linux-*/amneziawg-kmod-* -name "amneziawg.ko" | head -n1)
          if [ -f "$KMOD_PATH" ]; then
            echo "Found module at: $KMOD_PATH"
            modinfo "$KMOD_PATH" | grep vermagic
          else
            echo "Module not found, did compilation succeed?"
          fi

      - name: Prepare artifacts
        run: |
          cd sdk
          mkdir -p awgrelease
          postfix="v${{ inputs.immortal_tag }}_${{ inputs.pkgarch }}_${{ inputs.target }}_${{ inputs.subtarget }}"
          cp bin/packages/${{ inputs.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk || true
          cp bin/packages/${{ inputs.pkgarch }}/awgopenwrt/luci-app-amneziawg_*.ipk awgrelease/luci-app-amneziawg_${postfix}.ipk || true
          cp bin/targets/${{ inputs.target}}/${{ inputs.subtarget}}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: amneziawg-${{ inputs.immortal_tag }}_${{ inputs.pkgarch }}_${{ inputs.target }}_${{ inputs.subtarget }}
          path: sdk/awgrelease/*
