name: Test Build AmneziaWG from cache

on:
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: "OpenWrt version"
        type: string
        required: true
        default: "24.10.3"
      openwrt_arch:
        description: "OpenWrt arch"
        type: string
        required: true
        default: "aarch64_cortex-a53"
      openwrt_target:
        description: "OpenWrt target"
        type: string
        required: true
        default: "mediatek"
      openwrt_subtarget:
        description: "OpenWrt subtarget"
        type: string
        required: true
        default: "filogic"
      compile_kmod:
        description: "Compile kernel module implementation"
        type: boolean
        required: true
        default: true
      compile_go:
        description: "Compile Go implementation"
        type: boolean
        required: true
        default: true
      custom_vermagic:
        description: "Override vermagic (optional)"
        type: string
        required: false
        default: "3ca4b8cb2fcc3a2027e8496143a86cab"

jobs:
  build-amneziawg:
    name: "Build AmneziaWG for OpenWrt..."
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout OpenWrt repository
        uses: actions/checkout@v5
        with:
          path: openwrt
          repository: openwrt/openwrt
          ref: ${{ inputs.openwrt_version == 'SNAPSHOT' && 'master' || format('v{0}', inputs.openwrt_version) }}
          fetch-depth: 0
          
      - name: Checkout AmneziaWG packages
        uses: actions/checkout@v5
        with:
          path: amneziawg-pkgs
          repository: kozhini/amneziawg-openwrt
          ref: master
          fetch-depth: 0

      - name: Copy local packages into OpenWrt
        run: |
          mkdir -p openwrt/package
          cp -r amneziawg-pkgs/amneziawg-go openwrt/package/
          cp -r amneziawg-pkgs/amneziawg-tools openwrt/package/
          cp -r amneziawg-pkgs/kmod-amneziawg openwrt/package/

      - name: Update PKG_SOURCE_VERSION and HASH
        run: |
          set -e -x
          LOGFILE=openwrt/UPDATED_COMMIT_LIST
          : > "$LOGFILE"

          update_pkg() {
            pkg="$1"; repo="$2"; branch="$3"
            echo "--- update $pkg from $repo#$branch ---"

            pkg_dir="openwrt/package/$pkg"
            if [ ! -d "$pkg_dir" ]; then
              echo "ERROR: $pkg_dir does not exist" >&2
              return 1
            fi

            commit=$(git ls-remote "$repo" "$branch" | awk '{print $1; exit}')
            url="${repo%.git}/archive/${commit}.tar.gz"
            hash=$(curl -L --retry 3 -s "$url" | sha256sum | cut -d' ' -f1)

            cd "$pkg_dir"
            sed -i "s/^PKG_SOURCE_VERSION:=.*/PKG_SOURCE_VERSION:=$commit/" Makefile
            sed -i "s/^PKG_MIRROR_HASH:=.*/PKG_MIRROR_HASH:=$hash/" Makefile
            cd - >/dev/null

            echo "$pkg $commit $hash $repo $branch" >> "$LOGFILE"
            echo "--- done $pkg ---"
          }

          update_pkg amneziawg-go https://github.com/amnezia-vpn/amneziawg-go.git master
          update_pkg amneziawg-tools https://github.com/amnezia-vpn/amneziawg-tools.git master
          update_pkg kmod-amneziawg https://github.com/amnezia-vpn/amneziawg-linux-kernel-module.git feature/awg2

          echo "=== Updated commits list ==="
          cat "$LOGFILE"


      - name: Restore cached tools and kernel
        uses: actions/cache/restore@v4
        with:
          key: ${{ runner.os }}-openwrt-cache-toolchain-kernel-${{ inputs.openwrt_version }}-${{ inputs.openwrt_arch }}-${{ inputs.openwrt_target }}-${{ inputs.openwrt_subtarget }}
          fail-on-cache-miss: true
          path: |
            openwrt/.config
            openwrt/.config.old
            openwrt/feeds.conf.default
            openwrt/bin/**
            openwrt/build_dir/**
            openwrt/dl/**
            openwrt/feeds/**
            openwrt/package/**
            openwrt/staging_dir/**
            openwrt/tmp/**
  
      - name: Compile AmneziaWG packages (auto-detect package paths)
        env:
          compile_kmod: ${{ inputs.compile_kmod }}
          compile_go: ${{ inputs.compile_go }}
        run: |
          set -e -x
          cd openwrt

          # find package dirs whose Makefile contains PKG_NAME with substring 'amneziawg'
          pkg_dirs=$(find package -maxdepth 4 -type f -name Makefile -exec grep -Il "PKG_NAME:.*amneziawg" {} \; | xargs -r -n1 dirname || true)

          if [ -z "$pkg_dirs" ]; then
            echo "No amneziawg packages found to build"
            exit 1
          fi

          for d in $pkg_dirs; do
            rel=${d#package/}
            base=$(basename "$rel")
            echo ">> Building package: $rel (basename $base)"
            # honor flags
            if [[ "$base" == kmod-* && "$compile_kmod" != "true" ]]; then
              echo "Skipping kmod (compile_kmod=false): $rel"
              continue
            fi
            if [[ "$base" == *-go && "$compile_go" != "true" ]]; then
              echo "Skipping go (compile_go=false): $rel"
              continue
            fi

            make package/"$rel"/clean -j $(nproc) || true
            make package/"$rel"/download -j $(nproc)
            make package/"$rel"/prepare -j $(nproc)
            make package/"$rel"/compile -j $(nproc)
          done

      - name: Prepare artifacts
        env:
          compile_kmod: ${{ inputs.compile_kmod }}
          custom_vermagic: ${{ inputs.custom_vermagic }}
        run: |
          set -e -x
          mkdir -p awgrelease

          # include vermagic (override if provided)
          if [ -n "$custom_vermagic" ]; then
            echo "vermagic=$custom_vermagic" > awgrelease/vermagic
          else
            # try to find .vermagic under build_dir (pattern)
            vm=$(cat openwrt/build_dir/target-${{ inputs.openwrt_arch }}*/linux-${{ inputs.openwrt_target }}_${{ inputs.openwrt_subtarget }}/linux-*/.vermagic 2>/dev/null || true)
            if [ -n "$vm" ]; then
              echo "vermagic=$vm" > awgrelease/vermagic
            else
              echo "vermagic=UNKNOWN" > awgrelease/vermagic
            fi
          fi

          # copy built kmod if exists
          if [ "${{ env.compile_kmod }}" = "true" ]; then
            find "openwrt/bin/targets/${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}/packages" -maxdepth 1 -type f -name 'kmod-amneziawg*' -exec cp {} awgrelease \; || true
          fi

          # copy other packages (ipk/apk)
          find "openwrt/bin/packages/${{ inputs.openwrt_arch }}/" -maxdepth 2 -type f \( -name '*amneziawg*.ipk' -o -name '*amneziawg*.apk' \) -exec cp {} awgrelease \; || true

          # include the commit log we generated earlier
          if [ -f openwrt/UPDATED_COMMIT_LIST ]; then
            cp openwrt/UPDATED_COMMIT_LIST awgrelease/UPDATED_COMMIT_LIST
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: amneziawg-${{ inputs.openwrt_version }}_${{ inputs.openwrt_arch }}_${{ inputs.openwrt_target }}_${{ inputs.openwrt_subtarget }}
          path: awgrelease/*
