name: Build AmneziaWG on ImmortalWrt

on:
  workflow_dispatch:
    inputs:
      immortal_tag:
        description: "ImmortalWrt release/tag"
        required: true
        type: string
        default: "24.10.3"
      pkgarch:
        description: "Package architecture"
        required: true
        type: string
        default: "aarch64_cortex-a53"
      target:
        description: "Target platform"
        required: true
        type: string
        default: "mediatek"
      subtarget:
        description: "Target subplatform"
        required: true
        type: string
        default: "filogic"
      compile_kmod:
        description: "Compile kernel module"
        required: true
        type: boolean
        default: true
      compile_go:
        description: "Compile Go implementation"
        required: true
        type: boolean
        default: true
      custom_vermagic:
        description: "Override vermagic (optional)"
        required: false
        type: string
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ImmortalWrt
        uses: actions/checkout@v5
        with:
          repository: immortalwrt/immortalwrt
          ref: v${{ inputs.immortal_tag }}
          fetch-depth: 0
          path: immortalwrt

      - name: Checkout latest AmneziaWG
        uses: actions/checkout@v5
        with:
          repository: kozhini/amneziawg-openwrt
          ref: master
          fetch-depth: 0
          path: amneziawg

      - name: Copy AmneziaWG packages
        run: |
          mkdir -p immortalwrt/package
          cp -r amneziawg/amneziawg-go immortalwrt/package/
          cp -r amneziawg/amneziawg-tools immortalwrt/package/
          cp -r amneziawg/kmod-amneziawg immortalwrt/package/
          cp -r amneziawg/luci-proto-amneziawg immortalwrt/package/

      - name: Update PKG_SOURCE_VERSION & HASH
        run: |
          set -e -x
          for pkg in amneziawg-go amneziawg-tools kmod-amneziawg; do
            pkg_dir="immortalwrt/package/$pkg"
            branch="master"
            if [ "$pkg" = "kmod-amneziawg" ]; then
              branch="feature/awg2"
            fi

            echo "--- Updating $pkg from branch $branch ---"

            # Получаем последний коммит для указанной ветки
            commit=$(git ls-remote "https://github.com/amnezia-vpn/$pkg.git" "$branch" | awk '{print $1; exit}')
            url="https://github.com/amnezia-vpn/$pkg/archive/$commit.tar.gz"

            # Считаем SHA256 хеш архива
            hash=$(curl -L --retry 3 -s "$url" | sha256sum | cut -d' ' -f1)

            # Обновляем Makefile пакета
            if [ -d "$pkg_dir" ]; then
              cd "$pkg_dir"
              sed -i "s/^PKG_SOURCE_VERSION:=.*/PKG_SOURCE_VERSION:=$commit/" Makefile
              sed -i "s/^PKG_MIRROR_HASH:=.*/PKG_MIRROR_HASH:=$hash/" Makefile
              cd - >/dev/null
              echo "--- $pkg updated: $commit ---"
            else
              echo "Warning: package directory $pkg_dir not found"
            fi
          done

      - name: Setup feeds & config
        run: |
          cd immortalwrt
          wget https://downloads.immortalwrt.org/releases/${{ inputs.immortal_tag }}/targets/${{ inputs.target}}/${{ inputs.subtarget}}/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config
          make defconfig

      - name: Build toolchain & kernel
        run: |
          cd immortalwrt
          make tools/install -j$(nproc)
          make toolchain/install -j$(nproc)
          make target/linux/compile -j$(nproc)

      - name: Build AmneziaWG packages
        run: |
          cd immortalwrt
          if [ "${{ inputs.compile_kmod }}" = "true" ]; then
            VERMAGIC=${{ inputs.custom_vermagic }}
            if [ -z "$VERMAGIC" ]; then
              VERMAGIC=$(cat build_dir/target-*/linux-*/linux-*/.vermagic)
            fi
            echo "Using vermagic: $VERMAGIC"
            make package/kmod-amneziawg/{clean,download,prepare,compile} VERMAGIC_OVERRIDE="$VERMAGIC" -j$(nproc)
          fi
          if [ "${{ inputs.compile_go }}" = "true" ]; then
            make package/amneziawg-tools/{clean,download,prepare,compile} -j$(nproc)
            make package/luci-app-amneziawg/{clean,download,prepare,compile} -j$(nproc)
          fi

      - name: Prepare artifacts
        run: |
          cd immortalwrt
          mkdir -p awgrelease
          postfix="v${{ inputs.immortal_tag }}_${{ inputs.pkgarch }}_${{ inputs.target }}_${{ inputs.subtarget }}"
          cp bin/packages/${{ inputs.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ inputs.pkgarch }}/awgopenwrt/luci-app-amneziawg_*.ipk awgrelease/luci-app-amneziawg_${postfix}.ipk
          cp bin/targets/${{ inputs.target}}/${{ inputs.subtarget}}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: amneziawg-${{ inputs.immortal_tag }}_${{ inputs.pkgarch }}_${{ inputs.target }}_${{ inputs.subtarget }}
          path: immortalwrt/awgrelease/*
