name: Build AmneziaWG on ImmortalWrt

on:
  workflow_dispatch:
    inputs:
      immortal_tag:
        description: "ImmortalWrt release/tag"
        required: true
        type: string
        default: "24.10.3"
      pkgarch:
        description: "Package architecture"
        required: true
        type: string
        default: "aarch64_cortex-a53"
      target:
        description: "Target platform"
        required: true
        type: string
        default: "mediatek"
      subtarget:
        description: "Target subplatform"
        required: true
        type: string
        default: "filogic"
      compile_kmod:
        description: "Compile kernel module"
        required: true
        type: boolean
        default: true
      compile_go:
        description: "Compile Go implementation"
        required: true
        type: boolean
        default: true
      custom_vermagic:
        description: "Override vermagic (optional)"
        required: false
        type: string
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ImmortalWrt
        uses: actions/checkout@v5
        with:
          repository: immortalwrt/immortalwrt
          ref: v${{ inputs.immortal_tag }}
          fetch-depth: 0
          path: immortalwrt

      - name: Checkout latest AmneziaWG
        uses: actions/checkout@v5
        with:
          repository: kozhini/amneziawg-openwrt
          ref: master
          fetch-depth: 0
          path: amneziawg

      - name: Copy AmneziaWG packages
        run: |
          mkdir -p immortalwrt/package
          cp -r amneziawg/amneziawg-go immortalwrt/package/
          cp -r amneziawg/amneziawg-tools immortalwrt/package/
          cp -r amneziawg/kmod-amneziawg immortalwrt/package/
          cp -r amneziawg/luci-proto-amneziawg immortalwrt/package/

      - name: Update PKG_SOURCE_VERSION & HASH
        run: |
          set -e -x

          update_pkg() {
            local pkg_dir="$1"
            local repo="$2"
            local branch="$3"

            echo "--- Updating $pkg_dir from $branch ---"

            commit=$(git ls-remote "$repo" "$branch" | awk '{print $1; exit}')
            url="$repo/archive/$commit.tar.gz"
            hash=$(curl -L --retry 3 -s "$url" | sha256sum | cut -d' ' -f1)

            if [ -d "$pkg_dir" ]; then
              cd "$pkg_dir"
              sed -i "s/^PKG_SOURCE_VERSION:=.*/PKG_SOURCE_VERSION:=$commit/" Makefile
              sed -i "s/^PKG_MIRROR_HASH:=.*/PKG_MIRROR_HASH:=$hash/" Makefile
              cd - >/dev/null
              echo "--- $pkg_dir updated: $commit ---"
            else
              echo "Warning: directory $pkg_dir not found"
            fi
          }

          update_pkg "amneziawg/amneziawg-go" "https://github.com/amnezia-vpn/amneziawg-go.git" "master"
          update_pkg "amneziawg/amneziawg-tools" "https://github.com/amnezia-vpn/amneziawg-tools.git" "master"
          update_pkg "amneziawg/kmod-amneziawg" "https://github.com/amnezia-vpn/amneziawg-linux-kernel-module.git" "feature/awg2"


      - name: Setup feeds & config
        run: |
          cd immortalwrt
          wget https://downloads.immortalwrt.org/releases/${{ inputs.immortal_tag }}/targets/${{ inputs.target}}/${{ inputs.subtarget}}/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config
          make defconfig

      - name: Build toolchain & kernel
        run: |
          cd immortalwrt
          make tools/install -j$(nproc)
          make toolchain/install -j$(nproc)
          make target/linux/compile -j$(nproc)

      - name: Build AmneziaWG packages
        run: |
          cd immortalwrt
          if [ "${{ inputs.compile_kmod }}" = "true" ]; then
            VERMAGIC=${{ inputs.custom_vermagic }}
            if [ -z "$VERMAGIC" ]; then
              VERMAGIC=$(cat build_dir/target-*/linux-*/linux-*/.vermagic)
            fi
            echo "Using vermagic: $VERMAGIC"
            make package/kmod-amneziawg/{clean,download,prepare,compile} VERMAGIC_OVERRIDE="$VERMAGIC" -j$(nproc)
          fi
          if [ "${{ inputs.compile_go }}" = "true" ]; then
            make package/amneziawg-tools/{clean,download,prepare,compile} -j$(nproc)
            make package/luci-app-amneziawg/{clean,download,prepare,compile} -j$(nproc)
          fi

      - name: Collect release artifacts
        run: |
          set -e
          cd immortalwrt
          mkdir -p awgrelease
          postfix="v24.10.3_aarch64_cortex-a53_mediatek_filogic"

          echo "=== Listing built packages (bin/packages) ==="
          ls -R bin/packages/aarch64_cortex-a53 || true

          echo "=== Listing target packages (bin/targets) ==="
          ls -R bin/targets/mediatek/filogic || true

          find_pkg() {
            local pattern=$1
            local dest=$2
            file=$(find bin/packages/aarch64_cortex-a53 -type f -name "$pattern" | head -n1 || true)
            if [ -n "$file" ]; then
              cp "$file" "awgrelease/${dest}_${postfix}.ipk"
              echo "Copied: $file -> awgrelease/${dest}_${postfix}.ipk"
            else
              echo "WARNING: package $pattern not found!"
            fi
          }

          find_pkg "amneziawg-tools_*.ipk" "amneziawg-tools"
          find_pkg "luci-app-amneziawg_*.ipk" "luci-app-amneziawg"

          # kmod всегда лежит в targets
          kmod=$(find bin/targets/mediatek/filogic/packages -type f -name "kmod-amneziawg_*.ipk" | head -n1 || true)
          if [ -n "$kmod" ]; then
            cp "$kmod" "awgrelease/kmod-amneziawg_${postfix}.ipk"
            echo "Copied: $kmod -> awgrelease/kmod-amneziawg_${postfix}.ipk"
          else
            echo "WARNING: kmod-amneziawg not found!"
          fi

          echo "=== Release artifacts collected ==="
          ls -lh awgrelease

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: amneziawg-${{ inputs.immortal_tag }}_${{ inputs.pkgarch }}_${{ inputs.target }}_${{ inputs.subtarget }}
          path: immortalwrt/awgrelease/*
