name: Build AmneziaWG from OpenWRT\ImmortalWRT

on:
  workflow_dispatch:
    inputs:
      firmware_type:
        description: "Firmware type"
        type: choice
        required: true
        default: "openwrt"
        options:
          - "openwrt"
          - "immortalwrt"
      openwrt_version:
        description: "OpenWrt/ImmortalWrt version"
        type: string
        required: true
        default: "24.10.4"
      amneziawg_version:
        description: "AmneziaWG version"
        type: string
        required: true
        default: "master"
      openwrt_arch:
        description: "Architecture"
        type: string
        required: true
        default: "aarch64_cortex-a53"
      openwrt_target:
        description: "Target"
        type: string
        required: true
        default: "mediatek"
      openwrt_subtarget:
        description: "Subtarget"
        type: string
        required: true
        default: "filogic"

jobs:
  build-amneziawg:
    name: "Build AmneziaWG for ${{ inputs.firmware_type }}: ${{ inputs.openwrt_version }} - ${{ inputs.openwrt_arch }} - ${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}"
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout AWG repository
      uses: actions/checkout@v5
      with:
        path: amneziawg
        ref: ${{ inputs.amneziawg_version }}
        fetch-depth: 0

    - name: Install additional packages
      run: |
        set -e -x
        sudo apt-get update
        sudo apt-get install -y python3-pyelftools python3-dev python3-setuptools swig

    - name: Download and prepare SDK
      run: |
        set -e -x
        if [ "${{ inputs.firmware_type }}" = "openwrt" ]; then
          if [ "${{ inputs.openwrt_version }}" = "SNAPSHOT" ]; then
            base_url="https://downloads.openwrt.org/snapshots/targets/${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}/"
          else
            base_url="https://downloads.openwrt.org/releases/${{ inputs.openwrt_version }}/targets/${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}/"
          fi
          sdk_pattern="openwrt-sdk"
        else
          if [ "${{ inputs.openwrt_version }}" = "SNAPSHOT" ]; then
            base_url="https://downloads.immortalwrt.org/snapshots/targets/${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}/"
          else
            base_url="https://downloads.immortalwrt.org/releases/${{ inputs.openwrt_version }}/targets/${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}/"
          fi
          sdk_pattern="immortalwrt-sdk"
        fi
        
        sdk_url=$(curl -s "${base_url}" | grep -oP "href=\"${sdk_pattern}[^\"]+\.tar\.[a-z0-9]+\"" | sed -e 's/href="//' -e 's/"$//' | head -n1)
        if [[ -z "$sdk_url" ]]; then
          echo "SDK file not found."
          exit 1
        fi
        curl -fsLO "$base_url$sdk_url"
        file_name=$(basename "$sdk_url")
        
        tar -xf "$file_name"
        
        rm -f *.tar.*
        mv *"${sdk_pattern}"* openwrt

        echo "src-cpy awgopenwrt ../amneziawg" >> openwrt/feeds.conf.default
        ./openwrt/scripts/feeds update -a
        curl -fsL "$base_url/config.buildinfo" > openwrt/.config
        echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> openwrt/.config
        echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> openwrt/.config
        echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> openwrt/.config
        echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> openwrt/.config
        echo "CONFIG_PACKAGE_amneziawg-tools=m" >> openwrt/.config
        echo "CONFIG_PACKAGE_luci-proto-amneziawg=m" >> openwrt/.config
        ./openwrt/scripts/feeds install -a
        make -C openwrt defconfig

    - name: Update Makefiles latest commits
      run: |
        set -e -x
        cd openwrt/package/feeds/awgopenwrt
        update_pkg() {
          local pkg_dir="$1"
          local repo="$2"
          local branch="$3"
          echo "--- Updating $pkg_dir from $branch ---"
          commit=$(git ls-remote "$repo" "$branch" | awk '{print $1; exit}')
          url="$repo/archive/$commit.tar.gz"
          hash=$(curl -L --retry 3 -s "$url" | sha256sum | cut -d' ' -f1)
          if [ -d "$pkg_dir" ]; then
            cd "$pkg_dir"
            sed -i "s/^PKG_SOURCE_VERSION:=.*/PKG_SOURCE_VERSION:=$commit/" Makefile
            sed -i "s/^PKG_MIRROR_HASH:=.*/PKG_MIRROR_HASH:=$hash/" Makefile
            cd - >/dev/null
            echo "--- $pkg_dir updated: $commit ---"
          else
            echo "Warning: directory $pkg_dir not found"
          fi
        }
        update_pkg "kmod-amneziawg" "https://github.com/amnezia-vpn/amneziawg-linux-kernel-module.git" "feature/awg2"
        update_pkg "amneziawg-tools" "https://github.com/amnezia-vpn/amneziawg-tools.git" "master"
        cd - >/dev/null

    - name: Compile AmneziaWG packages
      run: |
        set -e -x
        cd openwrt
        make package/kmod-amneziawg/{clean,download,prepare,compile} -j $(nproc) V=s
        make package/luci-proto-amneziawg/{clean,download,prepare,compile} -j $(nproc) V=s
        make package/amneziawg-tools/{clean,download,prepare,compile} -j $(nproc) V=s

    - name: Prepare artifacts
      id: prepare_artifacts
      run: |
        set -e -x
        mkdir awgrelease
        find "openwrt/bin/targets/${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}/packages" -maxdepth 1 -type f -name 'kmod-amneziawg*' -exec cp {} awgrelease \;
        find "openwrt/bin/packages/${{ inputs.openwrt_arch }}/awgopenwrt" -maxdepth 1 -type f \( -name '*.ipk' -o -name '*.apk' \) -exec cp {} awgrelease \;

    - name: Get current date for release notes
      id: get_date
      run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v1
      with:
        files: awgrelease/*
        tag_name: ${{ inputs.firmware_type }}-${{ inputs.openwrt_version }}-${{ inputs.openwrt_arch }}
        name: 'AmneziaWG ${{ inputs.firmware_type }}-${{ inputs.openwrt_version }} for ${{ inputs.openwrt_arch }}'
        body: |
          Automatic build of AmneziaWG packages for OpenWrt/ImmortalWrt.

          **Build Date:** ${{ steps.get_date.outputs.date }}
          **Firmware:** ${{ inputs.firmware_type }}
          **OpenWrt/ImmortalWrt Version:** ${{ inputs.openwrt_version }}
          **Architecture:** ${{ inputs.openwrt_arch }}
          **Target/Subtarget:** ${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
